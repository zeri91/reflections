How did viewing a diff between two versions of a file help you see the bug that was introduced?
Mi aiuta mostrandomi le differenze riga per riga tra le 2 versioni del file
ma se il file è troppo grande o se ci sono troppe differenze, diventa complicato trovare l'errore

How could having easy access to the entire history of a file make you a more efficient programmer in the long term?
Permettendomi di trovare rapidamente una modifica fatta in un deteterminato momento
dello sviluppo del programma. In caso di errori posso anche ripartire dall'ultima
versione funzionante

What do you think are the pros and cons of manually choosing when to create a commit, like you do in Git, vs having versions automatically saved, like Google docs does?
pro: posso committare quando è più opportuno senza vincoli temporali o di altro tipo
contro: rischio di scordarmi di committare quando opportuno o di farlo troppo spesso 

Why do you think some version control systems, like Git, allow saving multiple files in one commit, while others, like Google Docs, treat each file separately?
Perchè Git è pensato ad hoc per i programmatori

How can you use the commands git log and git diff to view the history of files?
con git log vedo tutti i commit che sono stati fatti, 
con git diff vedo tra le varie commit cosa è stato fatto

How might using version control make you more confident to make changes that could break something?
creare errori non è un problema dal momento che posso tornare ad una versione precedente del 
programma usando git checkout 

Now that you have your workspace set up, what do you want to try using Git for?
Progetti un po più grandi di quelli che ho fatto fin ora

repository: insieme degli snapshot del programma, cioè l'insieme di tutte le commit
commit: versione del programma salvata in un determinato momento
git log: vedo tutte le commit del programma
git diff c1 c2: mostra le differenze tra la commit c1 e la c2
checkout: ripristina i miei files facendoli tornare quelli di una determinata commit
git clone url: scarica la repository che si trova a url 
git checkout master: se mi trovo in una versione passata dei file (ho fatto git checkout di una vecchia commit)
		     con questo comando ritorno alla commit più recente
git init: comando da eseguire all'interno di una cartella, mi crea la repository, quindi crea una cartella 
		  invisibile ".git" che contiene i metadati che tengono traccia di tutte le modifiche ai miei files
git add file: aggiunge un file alla staging area
git  diff: mostra le differenze tra i files nella staging area e i files nella working directory
git diff --staged: mostra le differenze tra i files della commit attuale e i files della staging area

git show "commit" --> mostra le differenze tra una commit ed i suoi parenti, questo perchè dopo che faccio
					un marge le commit elencate in git log possono non essere commit successive e quindi 
					se faccio git diff mi spuntano tantissime differenze e non solo quelle che la nuova 
					commit ha rispetto alla precedente

git merge master easymode --> crea una nuova commit che è l'unione delle 2 ultime commit dei 2 rami, se mi trovo in master
							  la nuova commmit farà parte di master. 

se voglio includere le funzioni di master in easymode senza alterare master, prima mi sposto su easymode (git checkout easy-mode)
e dopo uso il comando git merge easymode master (ho invertito l'ordine dei 2 rami)
se il merge fallisce a causa di conflitti significa che entrambe le commit che voglio unire hanno modificato la stessa parte 
di codice